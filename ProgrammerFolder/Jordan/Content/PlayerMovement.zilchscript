class PlayerMovement : ZilchComponent
{
  
  [Property]
  var RightKey : Keys = Keys.D;
  
  [Property]
  var LeftKey : Keys = Keys.A;
  
  [Property]
  var DownKey : Keys = Keys.S;
  
  [Property]
  var UpKey : Keys = Keys.W;
  
  var Goal : Cog = null;
  
  var SpawnPos = Real3();
  
  [Property]
  var PlayerJump : SoundCue = null;
  
  [Property]
  var PlayerDeath : SoundCue = null;
  
  function Initialize(init : CogInitializer)
  {
    this.OnMove();
    this.SpawnPos = Real3(0.5, -8.5, 0);
    this.Goal = this.Space.FindObjectByName("Goal");
    Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionStarted);
    //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  
  function OnMove()
  {
    
    //using this action sequence for the movement will not allow multiple inputs to be put in at once and will make sure that a specific amount is moved each time
    //for each button press
    var seq = Action.Sequence(this.Owner.Actions);
    
    //right
    if(Zero.Keyboard.KeyIsPressed(this.RightKey) && !((this.Owner.Transform.Translation.X + 1) >= 10.5))
    {
      this.Owner.Sprite.CurrentFrame += 1;
      Action.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X + 1, this.Owner.Transform.Translation.Y, 0), 0.01, Ease.Linear);
      Action.Property(seq, @this.Owner.Sprite.CurrentFrame, this.Owner.Sprite.CurrentFrame + 1, 0.1, Ease.Linear);
      this.Owner.Transform.EulerAngles = Real3(0,0,-1.5707);
       this.Space.SoundSpace.PlayCue(this.PlayerJump);
    }
    
    //left
    if(Zero.Keyboard.KeyIsPressed(this.LeftKey) && !((this.Owner.Transform.Translation.X - 1) <= -10.5))
    {
      this.Owner.Sprite.CurrentFrame += 1;
      Action.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X - 1, this.Owner.Transform.Translation.Y, 0), 0.01, Ease.Linear);
      this.Owner.Transform.EulerAngles = Real3(0,0,1.5707);
      Action.Property(seq, @this.Owner.Sprite.CurrentFrame, this.Owner.Sprite.CurrentFrame + 1, 0.1, Ease.Linear);
      this.Space.SoundSpace.PlayCue(this.PlayerJump);
    }
    //up
    if(Zero.Keyboard.KeyIsPressed(this.UpKey))
    {
      this.Owner.Sprite.CurrentFrame += 1;
      Action.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X, this.Owner.Transform.Translation.Y + 1, 0), 0.01, Ease.Linear);
      this.Owner.Transform.EulerAngles = Real3(0,0,0);
      Action.Property(seq, @this.Owner.Sprite.CurrentFrame, this.Owner.Sprite.CurrentFrame + 1, 0.1, Ease.Linear);
      this.Space.SoundSpace.PlayCue(this.PlayerJump);
    }
    //down
    if(Zero.Keyboard.KeyIsPressed(this.DownKey) && !((this.Owner.Transform.Translation.Y - 1) <= -9.5))
    {
      this.Owner.Sprite.CurrentFrame += 1;
      this.Owner.Transform.EulerAngles = Real3(0,0,3.14);
      Action.Property(seq, @this.Owner.Transform.Translation, Real3(this.Owner.Transform.Translation.X, this.Owner.Transform.Translation.Y - 1, 0), 0.01, Ease.Linear);
      Action.Property(seq, @this.Owner.Sprite.CurrentFrame, this.Owner.Sprite.CurrentFrame + 1, 0.1, Ease.Linear);
      this.Space.SoundSpace.PlayCue(this.PlayerJump);
    }
    
    Action.Call(seq, this.OnMove);
  }
   function OnCollisionStarted(event : CollisionEvent)
  {
      
      
    if(event.OtherObject != this.Goal)
    {
      Console.WriteLine("pretzel");
      //resets the player position and velocity
      this.Owner.RigidBody.Velocity = Real3(0,0,0);
      this.Owner.Transform.Translation = this.SpawnPos;
      this.Space.SoundSpace.PlayCue(this.PlayerDeath);
    }
    
  }
}
 // function DeathAnimation
  //{
    
    
    
    
    
    
 // }
  
//}
